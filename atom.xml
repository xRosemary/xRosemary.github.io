<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xRosemary的个人博客</title>
  <icon>https://www.gravatar.com/avatar/dd7a5c34c75bc70b46646963abcfd04f</icon>
  <subtitle>鼠鼠的救赎</subtitle>
  <link href="https://xrosemary.github.io/atom.xml" rel="self"/>
  
  <link href="https://xrosemary.github.io/"/>
  <updated>2022-09-19T13:25:22.554Z</updated>
  <id>https://xrosemary.github.io/</id>
  
  <author>
    <name>xRosemary</name>
    <email>2862656629@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>new / delete 和 malloc / free 的异同</title>
    <link href="https://xrosemary.github.io/posts/ffb7.html"/>
    <id>https://xrosemary.github.io/posts/ffb7.html</id>
    <published>2022-09-19T05:58:32.000Z</published>
    <updated>2022-09-19T13:25:22.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="new-delete-和-malloc-free-的异同"><a href="#new-delete-和-malloc-free-的异同" class="headerlink" title="new / delete 和 malloc / free 的异同"></a>new / delete 和 malloc / free 的异同</h1><h2 id="栈区和堆区"><a href="#栈区和堆区" class="headerlink" title="栈区和堆区"></a>栈区和堆区</h2><ul><li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li><li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li></ul><h2 id="相同之处"><a href="#相同之处" class="headerlink" title="相同之处"></a>相同之处</h2><p>new / delete 和 malloc / free 都用于堆区内存的管理</p><h2 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h2><ul><li><p>new / delete 是操作符，malloc / free 是库函数。</p></li><li><p>申请内存的过程：</p><ul><li>new不需要指定内存大小，而malloc需要</li><li>new在申请内存后会调用类的构造函数</li><li>new申请动态内存失败时，会抛出bac_alloc异常</li><li>new申请动态内存成功时返回的是对象类型的指针，无须进行类型转换；malloc申请动态内存成功时返回void * ，需要通过强制类型转换。</li></ul></li><li>释放内存的过程：<ul><li>调用free之前需要检查需要释放的指针是否为空，使用delete 释放内存则不需要检查指针是否为NULL</li><li>delete在释放内存前会调用类的析构函数</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;new-delete-和-malloc-free-的异同&quot;&gt;&lt;a href=&quot;#new-delete-和-malloc-free-的异同&quot; class=&quot;headerlink&quot; title=&quot;new / delete 和 malloc / free 的异同&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="学习" scheme="https://xrosemary.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Cpp" scheme="https://xrosemary.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>浅析Cpp中的构造函数和析构函数</title>
    <link href="https://xrosemary.github.io/posts/759e.html"/>
    <id>https://xrosemary.github.io/posts/759e.html</id>
    <published>2022-09-15T03:00:55.000Z</published>
    <updated>2022-09-19T13:26:05.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析Cpp中的构造函数和析构函数"><a href="#浅析Cpp中的构造函数和析构函数" class="headerlink" title="浅析Cpp中的构造函数和析构函数"></a>浅析Cpp中的构造函数和析构函数</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>构造函数分为以下四类：</p><ul><li><strong>⽆参数构造函数</strong>：如果没有明确写出⽆参数构造函数，编译器会⾃动⽣成默认的⽆参数构造函数。</li><li><strong>⼀般构造函数</strong>：创建对象时根据传⼊参数不同调⽤不同的构造函数。</li><li><strong>拷⻉构造函数</strong>：拷⻉构造函数的函数参数为对象本身的引⽤，⽤于根据⼀个已存在的对象复制 出⼀个新的该类的对象。</li><li><strong>类型转换构造函数</strong>：根据⼀个指定类型的对象创建⼀个本类的对象，也可以算是⼀般构造函数的⼀种。</li></ul><p>这里注意，还有一个与拷贝构造相关的运算符重载：</p><ul><li><strong>赋值运算符的重载</strong>：类似拷⻉构造函数，将＝右边的本类对象的值复制给＝左边的对象，它不属于构造函数，＝左右两边的对象必需已经被创建。如果没有显示的写赋值运算符的重载，系统也会⽣成默认的赋值运算符，做⼀些基本的拷⻉⼯作。</li></ul><h3 id="初始化表-参考"><a href="#初始化表-参考" class="headerlink" title="初始化表(参考)"></a>初始化表(<a href="https://blog.csdn.net/weixin_47984545/article/details/120907541">参考</a>)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    string c;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="type">int</span> a1, <span class="type">double</span> b1, string c1): <span class="built_in">a</span>(a1), <span class="built_in">b</span>(b1), <span class="built_in">c</span>(c1)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="性能消耗"><a href="#性能消耗" class="headerlink" title="性能消耗"></a>性能消耗</h4><p>构造函数的执行分两个阶段：</p><ol><li>初始化阶段：类中成员变量的初始化</li><li>计算阶段：在构造函数的函数体内执行</li></ol><p>如果不使用初始化列表，类会在初始化阶段先调用默认构造参数对成员变量进行初始化，然后在函数体内调用拷贝构造函数利用传入参数对成员变量进行赋值操作。</p><p>如果使用初始化列表，类只会调用一次拷贝构造函数对成员变量进行初始化赋值操作，省去了调用默认构造函数的性能消耗。</p><h4 id="必须使用初始化列表的情况"><a href="#必须使用初始化列表的情况" class="headerlink" title="必须使用初始化列表的情况"></a>必须使用初始化列表的情况</h4><p>常量成员：因为常量成员在定义时就必须进行初始化<br>引用类型：引用相当于指针常量，不能修改指向，即不能赋值<br>没有默认构造函数的类成员：在初始化阶段无法调用默认构造函数进行初始化</p><p><strong>(注意)</strong>类成员的初始化顺序取决于在类中定义的顺序，和初始化列表的顺序无关</p><h3 id="和虚函数的关系"><a href="#和虚函数的关系" class="headerlink" title="和虚函数的关系"></a>和虚函数的关系</h3><h4 id="虚函数指针"><a href="#虚函数指针" class="headerlink" title="虚函数指针"></a>虚函数指针</h4><p>虚函数指针的初始化是在构造函数中完成的。</p><h4 id="构造函数为什么⼀般不定义为虚函数"><a href="#构造函数为什么⼀般不定义为虚函数" class="headerlink" title="构造函数为什么⼀般不定义为虚函数"></a>构造函数为什么⼀般不定义为虚函数</h4><ul><li>虚函数调⽤只需要知道“部分的”信息，即只需要知道函数接⼝，⽽不需要知道对象的具体 类型。但是，我们要创建⼀个对象的话，是需要知道对象的完整信息的。特别是，需要知 道要创建对象的确切类型，因此，构造函数不应该被定义成虚函数； </li><li>⽽且从⽬前编译器实现虚函数进⾏多态的⽅式来看，虚函数的调⽤是通过实例化之后对象 的虚函数表指针来找到虚函数的地址进⾏调⽤的，如果说构造函数是虚的，那么虚函数表 指针则是不存在的，⽆法找到对应的虚函数表来调⽤虚函数，那么这个调⽤实际上也是违 反了先实例化后调⽤的准则。</li></ul><h3 id="拷贝构造函数的调用"><a href="#拷贝构造函数的调用" class="headerlink" title="拷贝构造函数的调用"></a>拷贝构造函数的调用</h3><p>拷贝构造函数会在以下几个地方被调用：</p><ol><li>类的一个对象去初始化类的另一个对象时。</li><li>当函数的形参是类的对象，调用函数进行形参和实参的结合时。</li><li>当函数的返回值是对象，函数执行完成返回调用者时。</li></ol><p><strong>注意</strong>，如果出现以下方式，拷贝构造只会被调用一次，因为编译器对其做出了优化，省去了一次拷贝构造。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">A <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">A a = <span class="built_in">getA</span>();</span><br></pre></td></tr></table></figure><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>析构函数没有参数，也没有返回值，⽽且不能重载，在⼀个类中只能有⼀个析构函数。 当撤销对象时，编译器也会⾃动调⽤析构函数。 每⼀个类必须有⼀个析构函数，⽤户可以⾃定义析构函数，也可以是编译器⾃动⽣成默认的析构函数。⼀般析构函数定义为类的公有成员。</p><h3 id="析构函数一般写为虚函数"><a href="#析构函数一般写为虚函数" class="headerlink" title="析构函数一般写为虚函数"></a>析构函数一般写为虚函数</h3><p>是为了降低内存泄漏的可能性。举例来说就是，⼀个基类的指针指向⼀个派⽣类的对象，在使⽤完毕准备销毁时，如果基类的析构函数没有定义成虚函数，那么编译器根据指针类型就会认为当前对象的类型是基类，调⽤基类的析构函数 （该对象的析构函数的函数地 址早就被绑定为基类的析构函数），仅执⾏基类的析构，派⽣类的⾃身内容将⽆法被析构，造成内存泄漏。 如果基类的析构函数定义成虚函数，那么编译器就可以根据实际对象，执⾏派⽣类的析构函 数，再执⾏基类的析构函数，成功释放内存。</p><h2 id="二者共同存在的问题"><a href="#二者共同存在的问题" class="headerlink" title="二者共同存在的问题"></a>二者共同存在的问题</h2><h3 id="在构造函数或析构函数中调⽤虚函数会怎样"><a href="#在构造函数或析构函数中调⽤虚函数会怎样" class="headerlink" title="在构造函数或析构函数中调⽤虚函数会怎样"></a>在构造函数或析构函数中调⽤虚函数会怎样</h3><p>派生类的自身部分还没有被初始化，对于这种还没有初始化的东西，C++选择当它们还不存在作为⼀种安全的⽅法。 也就是说构造派⽣类的基类部分是，编译器会认为这就是⼀个基类类型的对象，然后调⽤基类类型中的虚函数实现，并没有按照我们想要的⽅式进⾏。析构函数中也同理。</p><h3 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h3><h4 id="构造函数顺序"><a href="#构造函数顺序" class="headerlink" title="构造函数顺序"></a>构造函数顺序</h4><ol><li>基类构造函数。如果有多个基类，则构造函数的调⽤顺序是某类在类派⽣表中出现的顺序，⽽不是它们在成员初始化表中的顺序。 </li><li>成员类对象构造函数。如果有多个成员类对象则构造函数的调⽤顺序是对象在类中被声明的顺序，⽽不是它们出现在成员初始化表中的顺序。</li><li>派⽣类构造函数。</li></ol><h4 id="析构函数顺序"><a href="#析构函数顺序" class="headerlink" title="析构函数顺序"></a>析构函数顺序</h4><ol><li>调⽤派⽣类的析构函数；</li><li>调⽤成员类对象的析构函数；</li><li>调⽤基类的析构函数。</li></ol><h3 id="delete-default-关键字"><a href="#delete-default-关键字" class="headerlink" title="delete/default 关键字"></a>delete/default 关键字</h3><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>用于限制一些默认函数的生成。</p><p>例如：需要禁止拷贝构造函数的使用。以前通过把拷贝构造函数声明为private访问权限，这样一旦使用编译器就会报错。</p><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>如果对构造函数进行了重载，则编译器不会隐式的生成一个默认的构造函数，此时如果调用了默认构造函数会在编译时报错，为了避免这种情况，一般会选择重写默认构造函数，且函数体为空。关键字 =default 优化了这种行为，用该关键字标记重写的默认拷贝构造函数，编译器会隐式生成一个版本，在代码更加简洁的同时，编译器隐式生成的版本的执行效率更高。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 重载构造函数，此时不会隐式生成默认构造函数</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> num) &#123;&#125;</span><br><span class="line">    <span class="comment">// 关键字 =default 标记编译器隐式生成该类的默认构造函数，</span></span><br><span class="line">    <span class="comment">// 代码更简洁，且隐式生成的版本执行效率更高</span></span><br><span class="line">    <span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可见性重写"><a href="#可见性重写" class="headerlink" title="可见性重写"></a>可见性重写</h3><p>C++中构造函数和析构函数可被private修饰；并且因为构造函数为私有，所以该类无法拥有派生类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;</span><br><span class="line">    ~<span class="built_in">A</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> A* <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">A* a1 = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"><span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Destroy</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A* a = A::<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用这一机制，可实现限制该类的实例在内存中存在的数量，也可实现不让该实例出现在栈上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅析Cpp中的构造函数和析构函数&quot;&gt;&lt;a href=&quot;#浅析Cpp中的构造函数和析构函数&quot; class=&quot;headerlink&quot; title=&quot;浅析Cpp中的构造函数和析构函数&quot;&gt;&lt;/a&gt;浅析Cpp中的构造函数和析构函数&lt;/h1&gt;&lt;h2 id=&quot;构造函数&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="学习" scheme="https://xrosemary.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Cpp" scheme="https://xrosemary.github.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>如何实现简易的火焰传播效果</title>
    <link href="https://xrosemary.github.io/posts/7989.html"/>
    <id>https://xrosemary.github.io/posts/7989.html</id>
    <published>2022-09-07T15:31:23.000Z</published>
    <updated>2022-09-19T13:26:58.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何实现简易的火焰传播效果"><a href="#如何实现简易的火焰传播效果" class="headerlink" title="如何实现简易的火焰传播效果"></a>如何实现简易的火焰传播效果</h1><h2 id="先展示下效果"><a href="#先展示下效果" class="headerlink" title="先展示下效果"></a>先展示下效果</h2><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/20220907230501.gif" alt="20220907230501"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="所需组件："><a href="#所需组件：" class="headerlink" title="所需组件："></a>所需组件：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├────── StaticMesh (网格体组件)</span><br><span class="line"></span><br><span class="line">│   ├── Sphere (球形碰撞体)</span><br><span class="line"></span><br><span class="line">│   └── ParticleSystem (粒子系统)</span><br></pre></td></tr></table></figure><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><p>首先，触发时开启粒子效果，其次将自己可燃的标签删除，再次获得碰撞体内所有的可燃物品。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220907235705186.png" alt="image-20220907235705186"></p><p>最后，点燃所有可燃物品。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220907235425148.png" alt="image-20220907235425148"></p><p>大功告成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何实现简易的火焰传播效果&quot;&gt;&lt;a href=&quot;#如何实现简易的火焰传播效果&quot; class=&quot;headerlink&quot; title=&quot;如何实现简易的火焰传播效果&quot;&gt;&lt;/a&gt;如何实现简易的火焰传播效果&lt;/h1&gt;&lt;h2 id=&quot;先展示下效果&quot;&gt;&lt;a href=&quot;#先展示</summary>
      
    
    
    
    <category term="UE4" scheme="https://xrosemary.github.io/categories/UE4/"/>
    
    
    <category term="游戏开发" scheme="https://xrosemary.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅析常见的设计模式</title>
    <link href="https://xrosemary.github.io/posts/f6f0.html"/>
    <id>https://xrosemary.github.io/posts/f6f0.html</id>
    <published>2022-09-05T13:46:31.000Z</published>
    <updated>2022-09-19T13:26:35.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析常见的设计模式"><a href="#浅析常见的设计模式" class="headerlink" title="浅析常见的设计模式"></a>浅析常见的设计模式</h1><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p><strong>应用：</strong>角色状态、场景切换、UI切换等。</p><p><strong>意图：</strong>允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><p><strong>主要解决：</strong>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><p><strong>何时使用：</strong>代码中包含大量与对象状态有关的条件语句。</p><p><strong>如何解决：</strong>将各种具体的状态类抽象出来。</p><p><strong>关键代码：</strong>通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。</p><p><strong>应用实例：</strong> 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/state_pattern_uml_diagram.png" alt="状态模式的 UML 图"></p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p><strong>应用：</strong>状态切换和维护时可使用外观模式简化Client的代码。</p><p><strong>意图：</strong>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>主要解决：</strong>降低访问复杂系统的内部子系统时的复杂度，简化客户端之间的接口。</p><p><strong>何时使用：</strong> 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。 2、定义系统的入口。</p><p><strong>如何解决：</strong>客户端不与系统耦合，外观类与系统耦合。</p><p><strong>关键代码：</strong>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><p><strong>应用实例：</strong> 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/3-1Q115152143509.gif" alt="外观模式的结构图"></p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p><strong>应用：</strong>在使用外观模式时可同时使用中介者模式，将Facade当作中介者</p><p><strong>意图：</strong>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>主要解决：</strong>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p><p><strong>何时使用：</strong>多个类相互耦合，形成了网状结构。</p><p><strong>如何解决：</strong>将上述网状结构分离为星型结构。</p><p><strong>关键代码：</strong>对象 Colleague 之间的通信封装到一个类中单独处理。</p><p><strong>应用实例：</strong> 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/20180504133958460.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅析常见的设计模式&quot;&gt;&lt;a href=&quot;#浅析常见的设计模式&quot; class=&quot;headerlink&quot; title=&quot;浅析常见的设计模式&quot;&gt;&lt;/a&gt;浅析常见的设计模式&lt;/h1&gt;&lt;h2 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习" scheme="https://xrosemary.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="设计模式" scheme="https://xrosemary.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>生产者-消费者模型</title>
    <link href="https://xrosemary.github.io/posts/ee08.html"/>
    <id>https://xrosemary.github.io/posts/ee08.html</id>
    <published>2022-09-05T12:12:26.000Z</published>
    <updated>2022-09-19T13:27:59.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产者-消费者模型"><a href="#生产者-消费者模型" class="headerlink" title="生产者-消费者模型"></a>生产者-消费者模型</h1><h2 id="一个万能模板"><a href="#一个万能模板" class="headerlink" title="一个万能模板"></a>一个万能模板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Job</span>&#123;</span><br><span class="line">    <span class="built_in">void</span> (*run)(<span class="type">void</span> *arg);</span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Job</span> *job;</span><br><span class="line">    <span class="built_in">mutex_lock</span>(&amp;mutex);</span><br><span class="line">    <span class="keyword">while</span>(!(job != <span class="built_in">get_job</span>()))&#123;</span><br><span class="line">        <span class="built_in">wait</span>(&amp;cv, &amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mutex_unlock</span>(&amp;mutex);</span><br><span class="line">    job-&gt;<span class="built_in">run</span>(job-&gt;arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生产者线程：<ul><li>“生产”产品，并把产品放到一个缓冲区里；</li><li>缓冲区充满时阻塞；</li><li>缓冲区有数据后唤醒消费者。</li></ul></li></ul><ul><li>消费者线程：<ul><li>“消费”产品；</li><li>缓冲区为空时阻塞；</li><li>缓冲区未充满时唤醒生产者。</li></ul></li></ul><h2 id="LeetCode-1117-H2O-生成"><a href="#LeetCode-1117-H2O-生成" class="headerlink" title="LeetCode 1117. H2O 生成"></a><a href="https://leetcode.cn/problems/building-h2o/">LeetCode 1117. H2O 生成</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">H2O</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">H2O</span>() &#123;</span><br><span class="line">        H = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> H;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">    mutex mu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hydrogen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseHydrogen)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mu)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!(H &lt; <span class="number">2</span>))&#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(lock);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// releaseHydrogen() outputs &quot;H&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">releaseHydrogen</span>();</span><br><span class="line">        H++;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">oxygen</span><span class="params">(function&lt;<span class="type">void</span>()&gt; releaseOxygen)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mu)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!(H == <span class="number">2</span>))&#123;</span><br><span class="line">            cv.<span class="built_in">wait</span>(lock);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// releaseOxygen() outputs &quot;O&quot;. Do not change or remove this line.</span></span><br><span class="line">        <span class="built_in">releaseOxygen</span>();</span><br><span class="line">        H = <span class="number">0</span>;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生产者-消费者模型&quot;&gt;&lt;a href=&quot;#生产者-消费者模型&quot; class=&quot;headerlink&quot; title=&quot;生产者-消费者模型&quot;&gt;&lt;/a&gt;生产者-消费者模型&lt;/h1&gt;&lt;h2 id=&quot;一个万能模板&quot;&gt;&lt;a href=&quot;#一个万能模板&quot; class=&quot;head</summary>
      
    
    
    
    <category term="学习" scheme="https://xrosemary.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="并行程序" scheme="https://xrosemary.github.io/tags/%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何实现虚幻5的TCP通信</title>
    <link href="https://xrosemary.github.io/posts/4238.html"/>
    <id>https://xrosemary.github.io/posts/4238.html</id>
    <published>2022-09-04T11:57:17.000Z</published>
    <updated>2022-09-19T13:27:25.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何实现虚幻5的TCP通信"><a href="#如何实现虚幻5的TCP通信" class="headerlink" title="如何实现虚幻5的TCP通信"></a>如何实现虚幻5的TCP通信</h1><h2 id="首先准备好一个服务端"><a href="#首先准备好一个服务端" class="headerlink" title="首先准备好一个服务端"></a>首先准备好一个服务端</h2><p>这里作者采用的是使用Python编写一个简易的TCP服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class="comment"># 创建服务端的socket对象</span></span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">4397</span></span><br><span class="line"></span><br><span class="line">server.bind((host, port))  <span class="comment"># 绑定</span></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">5</span>)  <span class="comment"># 监听</span></span><br><span class="line"></span><br><span class="line">clientsocket,addr = server.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保持执行直到接收到字符串exit</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = clientsocket.recv(<span class="number">1024</span>)  <span class="comment">#接收客户端的消息</span></span><br><span class="line">    </span><br><span class="line">    strData = msg.decode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 解码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断客户端是否收到exit，是就退出此次对话</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;服务端收到:&quot;</span>, strData)</span><br><span class="line">    <span class="keyword">if</span> strData==<span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;回复:&quot;</span>)</span><br><span class="line">    clientsocket.send(msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure><h2 id="编写UE5端的TCP代码"><a href="#编写UE5端的TCP代码" class="headerlink" title="编写UE5端的TCP代码"></a>编写UE5端的TCP代码</h2><p>以下代码会将接口暴露给蓝图，读者可根据需求使用C++或者蓝图调用消息发送和接受的接口。</p><h3 id="h文件"><a href="#h文件" class="headerlink" title=".h文件"></a>.h文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Networking/Public/Networking.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GameFramework/Actor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyActor.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCPCLIENT_API</span> AMyActor : <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AMyActor</span>();</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called when the game starts or when spawned</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">EndPlay</span><span class="params">(<span class="type">const</span> EEndPlayReason::Type EndPlayReason)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">FSocket* ListenerSocket;</span><br><span class="line"></span><br><span class="line">FSocket* ConnectionSocket;</span><br><span class="line"></span><br><span class="line">FIPv4Endpoint RemoteAddressForConnection;</span><br><span class="line"></span><br><span class="line">FTimerHandle TCPSocketListenerTimerHandle;</span><br><span class="line"></span><br><span class="line">FTimerHandle TCPConnectionListenerTimerHandle;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;MySocket&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SocketCreate</span><span class="params">(FString IPStr, int32 port)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;MySocket&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SocketSend</span><span class="params">(FString meesage)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintPure, Category = <span class="string">&quot;MySocket&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SocketReceive</span><span class="params">(<span class="type">bool</span>&amp; bReceive, FString&amp; recvMessage)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">StringFromBinaryArray</span><span class="params">(TArray&lt;uint8&gt; BinaryArray)</span></span>;</span><br><span class="line">FSocket* SocketClient;</span><br><span class="line">FIPv4Address ip;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="cpp文件"><a href="#cpp文件" class="headerlink" title=".cpp文件"></a>.cpp文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyActor.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default values</span></span><br><span class="line">AMyActor::<span class="built_in">AMyActor</span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span></span><br><span class="line">PrimaryActorTick.bCanEverTick = <span class="literal">true</span>;</span><br><span class="line">SocketClient = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::BeginPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">FString IPStr = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">int32 port = <span class="number">4397</span>;</span><br><span class="line"><span class="type">bool</span> success = <span class="built_in">SocketCreate</span>(IPStr, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::EndPlay</span><span class="params">(<span class="type">const</span> EEndPlayReason::Type EndPlayReason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">EndPlay</span>(EndPlayReason);</span><br><span class="line">UWorld* World = <span class="built_in">GetWorld</span>();</span><br><span class="line"><span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetTimerManager</span>().<span class="built_in">ClearTimer</span>(TCPConnectionListenerTimerHandle);</span><br><span class="line"><span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetTimerManager</span>().<span class="built_in">ClearTimer</span>(TCPSocketListenerTimerHandle);</span><br><span class="line"><span class="keyword">if</span> (ConnectionSocket != <span class="literal">NULL</span>) &#123;</span><br><span class="line">ConnectionSocket-&gt;<span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ListenerSocket != <span class="literal">NULL</span>) &#123;</span><br><span class="line">ListenerSocket-&gt;<span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SocketClient) &#123;</span><br><span class="line">SocketClient-&gt;<span class="built_in">Close</span>();</span><br><span class="line">ISocketSubsystem::<span class="built_in">Get</span>(PLATFORM_SOCKETSUBSYSTEM)-&gt;<span class="built_in">DestroySocket</span>(SocketClient);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::Tick</span><span class="params">(<span class="type">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> bReceive = <span class="literal">false</span>;</span><br><span class="line">FString recvMessag = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">SocketReceive</span>(bReceive, recvMessag);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AMyActor::SocketCreate</span><span class="params">(FString IPStr, int32 port)</span> </span>&#123;</span><br><span class="line">FIPv4Address::<span class="built_in">Parse</span>(IPStr, ip);</span><br><span class="line">TSharedRef&lt;FInternetAddr&gt; addr = ISocketSubsystem::<span class="built_in">Get</span>(PLATFORM_SOCKETSUBSYSTEM)-&gt;<span class="built_in">CreateInternetAddr</span>();</span><br><span class="line">addr-&gt;<span class="built_in">SetIp</span>(ip.Value);</span><br><span class="line">addr-&gt;<span class="built_in">SetPort</span>(port);</span><br><span class="line">SocketClient = ISocketSubsystem::<span class="built_in">Get</span>(PLATFORM_SOCKETSUBSYSTEM)-&gt;<span class="built_in">CreateSocket</span>(NAME_Stream, <span class="built_in">TEXT</span>(<span class="string">&quot;default&quot;</span>), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SocketClient-&gt;<span class="built_in">Connect</span>(*addr))</span><br><span class="line">&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">2.0f</span>, FColor::Green, <span class="built_in">TEXT</span>(<span class="string">&quot;Connect Succ!&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Connect Succ!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">2.0f</span>, FColor::Green, <span class="built_in">TEXT</span>(<span class="string">&quot;Connect failed!&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Connect failed!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::SocketSend</span><span class="params">(FString meesage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR* seriallizedChar = meesage.<span class="built_in">GetCharArray</span>().<span class="built_in">GetData</span>();</span><br><span class="line">int32 size = FCString::<span class="built_in">Strlen</span>(seriallizedChar) + <span class="number">1</span>;</span><br><span class="line">int32 sent = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SocketClient-&gt;<span class="built_in">Send</span>((uint8*)<span class="built_in">TCHAR_TO_UTF8</span>(seriallizedChar), size, sent))</span><br><span class="line">&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">2.0f</span>, FColor::Green, <span class="built_in">TEXT</span>(<span class="string">&quot;Send Succ!&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Send Succ!&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">2.0f</span>, FColor::Green, <span class="built_in">TEXT</span>(<span class="string">&quot;Send failed!&quot;</span>));</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Send failed!&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMyActor::SocketReceive</span><span class="params">(<span class="type">bool</span>&amp; bReceive, FString&amp; recvMessage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">recvMessage = <span class="string">&quot;&quot;</span>;</span><br><span class="line">bReceive = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!SocketClient)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TArray&lt;uint8&gt; ReceiveData;</span><br><span class="line">uint32 size;</span><br><span class="line">uint8 element = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (SocketClient-&gt;<span class="built_in">HasPendingData</span>(size))</span><br><span class="line">&#123;</span><br><span class="line">ReceiveData.<span class="built_in">Init</span>(element, FMath::<span class="built_in">Min</span>(size, <span class="number">65507u</span>));</span><br><span class="line">int32 read = <span class="number">0</span>;</span><br><span class="line">SocketClient-&gt;<span class="built_in">Recv</span>(ReceiveData.<span class="built_in">GetData</span>(), ReceiveData.<span class="built_in">Num</span>(), read);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ReceiveData.<span class="built_in">Num</span>() &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FString log = <span class="string">&quot;Total Data read! num: &quot;</span> + FString::<span class="built_in">FromInt</span>(ReceiveData.<span class="built_in">Num</span>() &lt;= <span class="number">0</span>);</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">2.0f</span>, FColor::Green, log);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;Recv log:  %s&quot;</span>), *log);</span><br><span class="line"><span class="type">const</span> FString ReceivedUE4String = <span class="built_in">StringFromBinaryArray</span>(ReceiveData);</span><br><span class="line">log = <span class="string">&quot;Server:&quot;</span> + ReceivedUE4String;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">1</span>, <span class="number">2.0f</span>, FColor::Green, log);</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;*** %s&quot;</span>), *log);</span><br><span class="line">recvMessage = ReceivedUE4String;</span><br><span class="line">bReceive = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">AMyActor::StringFromBinaryArray</span><span class="params">(TArray&lt;uint8&gt; BinaryArray)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FString</span>(<span class="built_in">ANSI_TO_TCHAR</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(BinaryArray.<span class="built_in">GetData</span>())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220904201728622.png" alt="image-20220904201728622"></p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220904201758389.png" alt="image-20220904201758389"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何实现虚幻5的TCP通信&quot;&gt;&lt;a href=&quot;#如何实现虚幻5的TCP通信&quot; class=&quot;headerlink&quot; title=&quot;如何实现虚幻5的TCP通信&quot;&gt;&lt;/a&gt;如何实现虚幻5的TCP通信&lt;/h1&gt;&lt;h2 id=&quot;首先准备好一个服务端&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="UE4" scheme="https://xrosemary.github.io/categories/UE4/"/>
    
    
    <category term="游戏开发" scheme="https://xrosemary.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="TCP" scheme="https://xrosemary.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>如何使用MPU-6050芯片来实现一个重力感应游戏</title>
    <link href="https://xrosemary.github.io/posts/8975.html"/>
    <id>https://xrosemary.github.io/posts/8975.html</id>
    <published>2022-09-04T10:50:27.000Z</published>
    <updated>2022-09-19T13:27:45.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何使用MPU-6050芯片来实现一个重力感应游戏"><a href="#如何使用MPU-6050芯片来实现一个重力感应游戏" class="headerlink" title="如何使用MPU-6050芯片来实现一个重力感应游戏"></a>如何使用MPU-6050芯片来实现一个重力感应游戏</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h2><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><p>本项目以树莓派作为输入设备，在功能上需要能实现树莓派与UE4引擎的交互，这里作者采用的是使用UDP协议进行数据传输。因为游戏要求输入设备具有实时性，而且由于数据是逐帧传输，数据量非常庞大，少许数据的丢失对玩家产生不了太大影响，因此本项目采用了更具效率的UDP协议。</p><p>其次，本项目要求树莓派具有重力感应功能，这里作者使用了MPU-6050芯片来实现这个功能。</p><h3 id="开发环境需求"><a href="#开发环境需求" class="headerlink" title="开发环境需求"></a>开发环境需求</h3><h2 id="网络通信结构"><a href="#网络通信结构" class="headerlink" title="网络通信结构"></a><strong>网络通信结构</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/clip_image002.jpg" alt="img"></p><center><strong>图 1  系统通信模型</strong></center><h2 id="电子元件连接"><a href="#电子元件连接" class="headerlink" title="电子元件连接"></a><strong>电子元件连接</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/clip_image002-16622890732841.jpg" alt="img"></p><center><strong>图 2  线路连接示意图</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/clip_image002-16622914551842.jpg" alt="img"></p><center><strong>图 3  连接测试示意图</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/clip_image002-16622914835343.jpg" alt="img"></p><center><strong>图 4  实物图</strong></center><p>树莓派上的程序开始运行后会依次执行下列逻辑：</p><ol><li><p>初始化MPU6050的IO</p></li><li><p>初始化两个按钮的IO</p></li><li><p>初始化Socket协议</p></li><li><p>不断循环读取MPU6050和两个按钮的数据，然后打包发送给游戏端</p></li></ol><p>其报文的数据部分主要包括三个自由度的角速度、三个自由度的加速度、以及按钮是否被按下的数据。</p><p>两个按钮接入的时GPIO.7和GPIO.21，采用的是低电平有效。</p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><h3 id="树莓派端"><a href="#树莓派端" class="headerlink" title="树莓派端"></a>树莓派端</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wiringPiI2C.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wiringPi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Device_Address 0x68  <span class="comment">// MPU6050 的地址</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWR_MGMT_1   0x6B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMPLRT_DIV   0x19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG       0x1A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_CONFIG  0x1B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_ENABLE   0x38</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_XOUT_H 0x3B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_YOUT_H 0x3D</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_ZOUT_H 0x3F</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_XOUT_H  0x43</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_YOUT_H  0x45</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_ZOUT_H  0x47</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pin1 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pin2 21</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MPU6050_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd = <span class="built_in">wiringPiI2CSetup</span>(Device_Address);   <span class="comment">/*Initializes I2C with device Address*/</span></span><br><span class="line">    <span class="built_in">wiringPiI2CWriteReg8</span>(fd, SMPLRT_DIV, <span class="number">0x07</span>); <span class="comment">/* Write to sample rate register */</span></span><br><span class="line">    <span class="built_in">wiringPiI2CWriteReg8</span>(fd, PWR_MGMT_1, <span class="number">0x01</span>); <span class="comment">/* Write to power management register */</span></span><br><span class="line">    <span class="built_in">wiringPiI2CWriteReg8</span>(fd, CONFIG, <span class="number">0</span>);        <span class="comment">/* Write to Configuration register */</span></span><br><span class="line">    <span class="built_in">wiringPiI2CWriteReg8</span>(fd, GYRO_CONFIG, <span class="number">24</span>);  <span class="comment">/* Write to Gyro Configuration register */</span></span><br><span class="line">    <span class="built_in">wiringPiI2CWriteReg8</span>(fd, INT_ENABLE, <span class="number">0x01</span>); <span class="comment">/*Write to interrupt enable register */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化按钮的IO</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">wiringPiSetup</span>() == <span class="number">-1</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setup wiringPi failed!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pinMode</span>(pin1,INPUT);</span><br><span class="line">    <span class="built_in">pinMode</span>(pin2,INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">short</span> <span class="title">read_raw_data</span><span class="params">(<span class="type">int</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">short</span> high_byte, low_byte, value;</span><br><span class="line">    high_byte = <span class="built_in">wiringPiI2CReadReg8</span>(fd, addr);</span><br><span class="line">    low_byte = <span class="built_in">wiringPiI2CReadReg8</span>(fd, addr + <span class="number">1</span>);</span><br><span class="line">    value = (high_byte &lt;&lt; <span class="number">8</span>) | low_byte;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">MPU6050_Get_Data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">45</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>)); </span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> Ax = <span class="number">0</span>, Ay = <span class="number">0</span>, Az = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> Gx = <span class="number">0</span>, Gy = <span class="number">0</span>, Gz = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从MPU6050获取三轴的加速度和角速度</span></span><br><span class="line">    Ax = <span class="built_in">read_raw_data</span>(ACCEL_XOUT_H) / <span class="number">16384.0</span>;</span><br><span class="line">    Ay = <span class="built_in">read_raw_data</span>(ACCEL_YOUT_H) / <span class="number">16384.0</span>;</span><br><span class="line">    Az = <span class="built_in">read_raw_data</span>(ACCEL_ZOUT_H) / <span class="number">16384.0</span>;</span><br><span class="line">    </span><br><span class="line">    Gx = <span class="built_in">read_raw_data</span>(GYRO_XOUT_H) / <span class="number">131</span>;</span><br><span class="line">    Gy = <span class="built_in">read_raw_data</span>(GYRO_YOUT_H) / <span class="number">131</span>;</span><br><span class="line">    Gz = <span class="built_in">read_raw_data</span>(GYRO_ZOUT_H) / <span class="number">131</span>;</span><br><span class="line">    <span class="type">int</span> button1 = <span class="built_in">digitalRead</span>(pin1);</span><br><span class="line">    <span class="type">int</span> button2 = <span class="built_in">digitalRead</span>(pin2);</span><br><span class="line">    <span class="comment">// 拼接成字符串</span></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%d,%d&quot;</span>, Gx, Gy, Gz, Ax, Ay, Az,button1,button2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 MPU6050</span></span><br><span class="line">    <span class="built_in">MPU6050_Init</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置端口号</span></span><br><span class="line">    <span class="type">int</span> port = <span class="number">5150</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建udp通信socket</span></span><br><span class="line">    <span class="type">int</span> udp_socket = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (udp_socket == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket failed!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置目的IP地址</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> address = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    address.sin_family = AF_INET;  <span class="comment">// 使用IPv4协议</span></span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>(port);  <span class="comment">// 设置接收方端口号</span></span><br><span class="line">    address.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.13.37&quot;</span>);  <span class="comment">//设置接收方IP </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//char buf[40] = &#123; 0 &#125;;</span></span><br><span class="line">    <span class="comment">// 循环发送数据</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取并记录数据</span></span><br><span class="line">        <span class="type">char</span>* buf = <span class="built_in">MPU6050_Get_Data</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf);                                                   </span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        <span class="built_in">sendto</span>(udp_socket, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr*)&amp;address, <span class="built_in">sizeof</span>(address));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空存留消息</span></span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">        <span class="comment">//delay(100);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭通信socket</span></span><br><span class="line">    <span class="built_in">close</span>(udp_socket);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UE4端（这里只列出通信部分）"><a href="#UE4端（这里只列出通信部分）" class="headerlink" title="UE4端（这里只列出通信部分）"></a>UE4端（这里只列出通信部分）</h3><h4 id="h文件"><a href="#h文件" class="headerlink" title=".h文件"></a>.h文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Config=Game)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AaircraftPawn</span> : <span class="keyword">public</span> APawn</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">EndPlay</span><span class="params">(<span class="type">const</span> EEndPlayReason::Type EndPlayReason)</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BeginPlay</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FSocket* ListenSocket;</span><br><span class="line">    FUdpSocketReceiver* UDPReceiver;</span><br><span class="line">    TSharedPtr&lt;FInternetAddr&gt; RemoteAddr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;UDP&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">StartUDPReceiver</span><span class="params">(<span class="type">const</span> FString&amp; YourChosenSocketName, <span class="type">const</span> FString&amp; TheIP, <span class="type">const</span> int32 ThePort)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintPure, Category = <span class="string">&quot;UDP&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">DataRecv</span><span class="params">(FString &amp;string)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FORCEINLINE <span class="type">void</span> <span class="title">ScreenMsg</span><span class="params">(<span class="type">const</span> FString&amp; Msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">5.f</span>, FColor::Red, *Msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">FORCEINLINE <span class="type">void</span> <span class="title">ScreenMsg</span><span class="params">(<span class="type">const</span> FString&amp; Msg, <span class="type">const</span> <span class="type">float</span> Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">5.f</span>, FColor::Red, FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s %f&quot;</span>), *Msg, Value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">FORCEINLINE <span class="type">void</span> <span class="title">ScreenMsg</span><span class="params">(<span class="type">const</span> FString&amp; Msg, <span class="type">const</span> FString&amp; Msg2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">5.f</span>, FColor::Red, FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s %s&quot;</span>), *Msg, *Msg2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="cpp文件"><a href="#cpp文件" class="headerlink" title=".cpp文件"></a>.cpp文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">AaircraftPawn::<span class="built_in">AaircraftPawn</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Initialize the Socket</span></span><br><span class="line">    ListenSocket = <span class="literal">NULL</span>;</span><br><span class="line">    UDPReceiver = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AaircraftPawn::BeginPlay</span><span class="params">()</span>  <span class="comment">// Initialize the game</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">BeginPlay</span>();</span><br><span class="line">    <span class="type">bool</span> isInstall = <span class="built_in">StartUDPReceiver</span>(<span class="string">&quot;ListenSocket&quot;</span>, <span class="string">&quot;192.168.197.37&quot;</span>, <span class="number">5150</span>);</span><br><span class="line">    <span class="keyword">if</span> (isInstall)</span><br><span class="line">    &#123;</span><br><span class="line">        GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">5.0f</span>, FColor::Blue, <span class="built_in">TEXT</span>(<span class="string">&quot;UDPReceiver Start&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">5.0f</span>, FColor::Blue, <span class="built_in">TEXT</span>(<span class="string">&quot;Fail to Install UDP&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AaircraftPawn::EndPlay</span><span class="params">(<span class="type">const</span> EEndPlayReason::Type EndPlayReason)</span> <span class="comment">// When the game ends</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">EndPlay</span>(EndPlayReason);</span><br><span class="line">    <span class="comment">// UDPReceiver empty</span></span><br><span class="line">    <span class="keyword">delete</span> UDPReceiver;</span><br><span class="line">    UDPReceiver = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear all sockets</span></span><br><span class="line">    <span class="keyword">if</span> (ListenSocket)</span><br><span class="line">    &#123;</span><br><span class="line">        ListenSocket-&gt;<span class="built_in">Close</span>();</span><br><span class="line">        ISocketSubsystem::<span class="built_in">Get</span>(PLATFORM_SOCKETSUBSYSTEM)-&gt;<span class="built_in">DestroySocket</span>(ListenSocket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AaircraftPawn::Tick</span><span class="params">(<span class="type">float</span> DeltaSeconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">Tick</span>(DeltaSeconds);</span><br><span class="line">    FString str;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">DataRecv</span>(str))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The data is captured here</span></span><br><span class="line">        TArray&lt;FString&gt; dataArr;</span><br><span class="line">        str.<span class="built_in">ParseIntoArray</span>(dataArr, <span class="built_in">TEXT</span>(<span class="string">&quot;,&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize the UDP</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AaircraftPawn::StartUDPReceiver</span><span class="params">(<span class="type">const</span> FString&amp; YourChosenSocketName, <span class="type">const</span> FString&amp; TheIP, <span class="type">const</span> int32 ThePort)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FIPv4Address Addr;</span><br><span class="line">    FIPv4Address::<span class="built_in">Parse</span>(TheIP, Addr);</span><br><span class="line">    <span class="function">FIPv4Endpoint <span class="title">Endpoint</span><span class="params">(FIPv4Address::Any, ThePort)</span></span>; <span class="comment">// All IP addresses are local</span></span><br><span class="line">    ListenSocket = <span class="built_in">FUdpSocketBuilder</span>(*YourChosenSocketName)</span><br><span class="line">        .<span class="built_in">AsNonBlocking</span>()  <span class="comment">// Set socket operations to non-blocking</span></span><br><span class="line">        .<span class="built_in">AsReusable</span>()  <span class="comment">// Make the bound address reusable by other sockets </span></span><br><span class="line">        .<span class="built_in">BoundToEndpoint</span>(Endpoint)  <span class="comment">// Set the port binding to the local endpoint</span></span><br><span class="line">        .<span class="built_in">WithReceiveBufferSize</span>(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>)  <span class="comment">// Set the size of the received data</span></span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    int32 BufferSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    ListenSocket-&gt;<span class="built_in">SetSendBufferSize</span>(BufferSize, BufferSize);</span><br><span class="line">    ListenSocket-&gt;<span class="built_in">SetReceiveBufferSize</span>(BufferSize, BufferSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ListenSocket)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ScreenMsg</span>(<span class="string">&quot;No socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AaircraftPawn::DataRecv</span><span class="params">(FString&amp; string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ListenSocket)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ScreenMsg</span>(<span class="string">&quot;No sender socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TSharedRef&lt;FInternetAddr&gt; targetAddr = ISocketSubsystem::<span class="built_in">Get</span>(PLATFORM_SOCKETSUBSYSTEM)-&gt;<span class="built_in">CreateInternetAddr</span>();</span><br><span class="line">    TArray&lt;uint8&gt; ReceivedData;  <span class="comment">// Define a receiver</span></span><br><span class="line">    uint32 Size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query the socket to see if there is any pending data in the queue</span></span><br><span class="line">    <span class="keyword">if</span> (ListenSocket-&gt;<span class="built_in">HasPendingData</span>(Size))</span><br><span class="line">    &#123;</span><br><span class="line">        string = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        uint8* Recv = <span class="keyword">new</span> uint8[Size];</span><br><span class="line">        int32 BytesRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Adjust the array to a given number of elements.  The new element will be initialized </span></span><br><span class="line">        ReceivedData.<span class="built_in">SetNumUninitialized</span>(FMath::<span class="built_in">Min</span>(Size, <span class="number">65507u</span>));</span><br><span class="line">        ListenSocket-&gt;<span class="built_in">RecvFrom</span>(ReceivedData.<span class="built_in">GetData</span>(), ReceivedData.<span class="built_in">Num</span>(), BytesRead, *targetAddr);</span><br><span class="line">        <span class="type">char</span> ansiiData[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(ansiiData, ReceivedData.<span class="built_in">GetData</span>(), BytesRead);  <span class="comment">// Copy data to the receiver</span></span><br><span class="line">        ansiiData[BytesRead] = <span class="number">0</span>;                           <span class="comment">// Determine the data end</span></span><br><span class="line">        FString debugData = <span class="built_in">ANSI_TO_TCHAR</span>(ansiiData);        <span class="comment">// String conversion</span></span><br><span class="line">        string = debugData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="演示截图"><a href="#演示截图" class="headerlink" title="演示截图"></a>演示截图</h2><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/clip_image002-16622924689304.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何使用MPU-6050芯片来实现一个重力感应游戏&quot;&gt;&lt;a href=&quot;#如何使用MPU-6050芯片来实现一个重力感应游戏&quot; class=&quot;headerlink&quot; title=&quot;如何使用MPU-6050芯片来实现一个重力感应游戏&quot;&gt;&lt;/a&gt;如何使用MPU-605</summary>
      
    
    
    
    <category term="UE4" scheme="https://xrosemary.github.io/categories/UE4/"/>
    
    
    <category term="物联网" scheme="https://xrosemary.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="游戏开发" scheme="https://xrosemary.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="UDP" scheme="https://xrosemary.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>在自动驾驶城市中用于360度感知环境的语义相机</title>
    <link href="https://xrosemary.github.io/posts/779.html"/>
    <id>https://xrosemary.github.io/posts/779.html</id>
    <published>2022-09-04T07:59:58.000Z</published>
    <updated>2022-09-19T13:28:20.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在自动驾驶城市中用于360度感知环境的语义相机"><a href="#在自动驾驶城市中用于360度感知环境的语义相机" class="headerlink" title="在自动驾驶城市中用于360度感知环境的语义相机"></a>在自动驾驶城市中用于360度感知环境的语义相机</h1><h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>出行的未来是个人交通的自动化，这将带来重大的社会、经济和生态效益。自动化电动交通将缓解大规模城市化和持续交通拥堵带来的挑战,更有效地协调交通中的车辆将通过减少温室气体排放来解决气候变化问题。此外，自动驾驶意味着通过消除人为错误来提高道路安全性。共享汽车将更具吸引力，老年人或残疾人的流动性将得到改善。然而,由于关键技术缺乏成熟，特别是在复杂的城市地区，全车自动化是一个长期的愿景,也是学术界和汽车行业的持续努力。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h3 id="1-语义分割-将图像分割成有相同意义的片段-："><a href="#1-语义分割-将图像分割成有相同意义的片段-：" class="headerlink" title="1. 语义分割(将图像分割成有相同意义的片段)："></a>1. 语义分割(将图像分割成有相同意义的片段)：</h3><p>道路中分割出的片段：<strong>车辆、行人、骑自行车的人</strong></p><p>评价标准：</p><pre><code>1. 如何捕获上下文线索2. 如何维护更精细尺度的细节，例如形状和边界3. 更高的输出分辨率</code></pre><h4 id="常用方法：全卷积网络（FCN）"><a href="#常用方法：全卷积网络（FCN）" class="headerlink" title="常用方法：全卷积网络（FCN）"></a>常用方法：全卷积网络（FCN）</h4><p>该方法在公共基准测试上取得了最先进的成果。</p><pre><code>特点：来自CNN的全连接层被卷积层取代</code></pre><p>他人的工作：</p><pre><code>L.-C. Chen，Y. Zhu等人提出的：DeepLab: Semantic image segmentation with deep convolutional nets, atrous convolution, and fully connected CRFs,L.-C. Chen, Y. Zhu等人提出的：Encoder- decoder with atrous separable convolution for semantic image segmen- tation</code></pre><p>这两种方法通过在最后的残缺块中采用扩张卷积来扩大分类CNN的感知视野，同时提供了更高的输出分辨率。其中第一种方法具有很高的内存占用，因为它在输出分辨率上提高了8倍。</p><p>可变形金字塔网络（PSPNet）通过采用并行池操作和融合不同尺度的特征来捕获全局图像信息。</p><h4 id="另一种流行的CNN架构：编码器-译码器"><a href="#另一种流行的CNN架构：编码器-译码器" class="headerlink" title="另一种流行的CNN架构：编码器-译码器"></a>另一种流行的CNN架构：编码器-译码器</h4><p>B. Shahian Jahromi, T. Tulabandhula等人的论文中提出了一种用于自由空间分割的编码器-译码器网络，该网络在自动化驾驶汽车的实时多传感器感知框架的背景下处理RGBD数据。<br>与针对每个任务单独训练的网络相比，多任务设置中的端到端训练可以提高准确性，并产生了一种更好地泛化的解决方案。</p><p>自动驾驶需要高性能的语义分割算法。上述方法中，编码器-译码器架构实现了准确性和延迟之间的最佳折衷。因此，本文采用了高效的ERNet网络对鱼眼图像进行语义分割，以降低计算成本、提高高质量的分割。</p><h3 id="2-实例分割（预测每个对象的语义掩码和实例标识符，以便我们区分属于同一类别的对象）"><a href="#2-实例分割（预测每个对象的语义掩码和实例标识符，以便我们区分属于同一类别的对象）" class="headerlink" title="2. 实例分割（预测每个对象的语义掩码和实例标识符，以便我们区分属于同一类别的对象）"></a>2. 实例分割（预测每个对象的语义掩码和实例标识符，以便我们区分属于同一类别的对象）</h3><p>该方法通常使用两种方法：候选区域的分割、没有候选区域的实例的分割。</p><p>基于候选区域的分割方案在实例分割方面取得了更好的结果，而单阶段方法可以实现快速推理，并且适用于自动驾驶领域。</p><p>本文在图像分割模块使用的是<strong>RetinaMask方法</strong>，因为它具有高精度、低计算成本、更重要的是降低了推理通道的复杂性，这允许使用Nvidia的深度学习推理引擎，进一步加速并简化部署。</p><h3 id="3-全景分割（将密集的像素分类为事物和特征类，并为图像的每个事物像素分配一个实例标识符）"><a href="#3-全景分割（将密集的像素分类为事物和特征类，并为图像的每个事物像素分配一个实例标识符）" class="headerlink" title="3. 全景分割（将密集的像素分类为事物和特征类，并为图像的每个事物像素分配一个实例标识符）"></a>3. 全景分割（将密集的像素分类为事物和特征类，并为图像的每个事物像素分配一个实例标识符）</h3><p>全景分割可以通过同时解决语义分割和实例分割来实现。</p><pre><code>基里洛夫等人提供基线分析法来解决这个问题，并且提出了一种端到端的可训练网络，通过采用语义和实例logits来在网络内部直接学习的全景输出。虽然这种方法能提供准确的结果，但它们的延迟较高，因此不适合在自动驾驶环境中使用。</code></pre><p><strong>本文提出了一种原始的全景分割融合方案，它使用实例类来纠正语义分类，并通过在语义掩码上传播实例标识符来改进实例掩码。</strong><br>该方法执行速度快，还提供了改进和统一的语义和实例分割输出，并且很容易集成到任何图像分割网络上的后处理步骤。</p><h2 id="测试车辆设置"><a href="#测试车辆设置" class="headerlink" title="测试车辆设置"></a>测试车辆设置</h2><p>UP‑Drive 项目的测试车辆5台是全电动大众 e‑Golf。为了保证 360° 3D 多模态环境感知，车辆上安装了三种不同类型的传感器：摄像头、雷达和激光雷达。传感器设置中集成了五个外部同步摄像头，以覆盖车辆的近距和远距环视：一个位于挡风玻璃后面的 60° 视野摄像头和四个鱼眼摄像头。前后鱼眼摄像头水平安装在车标附近，左右摄像头安装在两侧后视镜上并向下倾斜。该系统配备四个185°宽视野摄像头，可在车辆周围提供360°覆盖，相邻摄像头之间有一些重叠。相机的鱼眼系统提供分辨率为 1280×800、JPEG 压缩为 30 帧/秒的彩色图像。<br><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/2.png" alt="图2"><br>相机的鱼眼系统具有广角镜头和等效的短焦距，这决定了要捕获的大部分场景。与窄视场相机相比，图像中物体的表观尺寸更小。因此，鱼眼相机限制了分割算法的检测范围。从我们的实验中，我们获得了仅 25 米的鱼眼图像的稳健行人分割。检测远处的物体很重要，尤其是在高速行驶时。为了克服这个问题，我们在设置中引入了一个窄视场RGB摄像头，安装在挡风玻璃后面。该相机具有 60°水平视野，以30帧/秒的帧速率提供 1928 × 1208 分辨率的图像，并将检测范围扩大了三倍。完整的传感器套件如图</p><h2 id="带有语义相机的2D感知"><a href="#带有语义相机的2D感知" class="headerlink" title="带有语义相机的2D感知"></a>带有语义相机的2D感知</h2><h3 id="图像预处理：图像去畸变和展开"><a href="#图像预处理：图像去畸变和展开" class="headerlink" title="图像预处理：图像去畸变和展开"></a>图像预处理：图像去畸变和展开</h3><p>由于在原始鱼眼图像中，结构和物体会因为广角镜头而高度失真，因此我们需要通过图像去畸变和图像展开来获取更合适的对应场景的图像。<br><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/3.png" alt="图3"><br><em>鱼眼图像展开过程的结果。第一行：鱼眼图像；第二行：鱼眼图像的圆柱投影。从左到右：前视图，右视图，后视图，左视图</em></p><h3 id="深度语义、实例和全景分割"><a href="#深度语义、实例和全景分割" class="headerlink" title="深度语义、实例和全景分割"></a>深度语义、实例和全景分割</h3><p>深度学习帮我们将分类问题扩展到表示学习，并在许多计算机视觉任务中显示出优于基于手工特征的算法的结果。<br>考虑到深度学习的优势和技术的先进，基于深度神经网络的解决方案很适合用于我们的自动驾驶感知软件。</p><ol><li>图像分割数据集<br>由于缺乏公开可用的360°感知数据集，我们采用了我们自己记录和注释的内部的UP-Drive数据集来训练和评估我们提出的在鱼眼图像上进行语义和实例分割的深度神经网络。<br><strong>这个数据集的一些特征:</strong></li></ol><blockquote><p>1）捕捉了各种照明条件</p><blockquote><p>记录来自德国北部的几个城市以及高速公路和乡村道路从早上到下午，考虑了不同的照明情况</p></blockquote><p>2）天气多样性</p><blockquote><p>时间跨度是在包括了春季夏季和秋季的几个月时间，因此在晴天、多云以及大雨等天气都有记录，甚至包括了镜头炫光、以及雨滴造成的镜头畸变</p></blockquote><p>3）图像覆盖车辆前后左右的周围视野</p><blockquote><p>包含了前视图像5111张、左视图像4684张、右视图像4800张、后视图像4967张</p></blockquote></blockquote><ol><li>语义分割<br>通过实现一个 <strong>全卷积神经网络（FCN）</strong> 用于四个语言图像的语义分割。<br><strong>介绍：</strong><br>考虑到现在先进的语义架构要么非常深要么非常宽，或者以更高的的内存使用和更长的时间为代价使用复杂的层，而在车辆的自动驾驶感知系统又必须使用低功耗硬件设备来实时运行。 <strong>因此我们选择采用了一个在准确性和效率之间取得良好平衡的高效网络ERFNet</strong><br><strong>ERFNet：</strong></li></ol><blockquote><p>该网络具有编码器‑解码器架构，其中编码器提取不同尺度的图像特征，解码器将特征组合成更高分辨率的表示。 ERFNet 的构建块是分解残差层。该层表示一维非瓶颈残差模块，它将二维内核分解为一维内核的线性组合。在这个设计中，每个 3×3 的卷积都被转换为 3×1 和 1×3 的卷积。当使用内核大小为 3 时，参数数量减少了 33%。同时，网络的内存效率更高、速度更快，同时容量增加，从而导致类似于更复杂模型的高精度分割。特征提取器通过堆叠具有扩张卷积的剩余 1D 非瓶颈块以三个尺度对特征进行编码：原始输入分辨率的 1/2、1/4、1/8。为了保留详细信息和小对象，高输出分辨率很重要。卷积层中的膨胀已被证明是一种捕获多尺度上下文的有效机制，这对于正确分类至关重要。轻量级解码器由一维非瓶颈块组成，并从编码器的最后一层恢复空间和语义信息</p><p><strong>实现：</strong><br>我们在具有四个Tesla V100 GPU的系统上用Pytorch框架实现我们的模型。该网络经过150个epoch的训练，每个GPU的批量大小为12个图像，多项式学习率从0.0025开始衰减。另外，交叉熵损失函数用过Adam优化器来优化。我们将图像裁剪为1280*640，并应用随机水平翻转和随机左右平移。这个网络使用Cityscapes数据集上的预训练权重进行初始化。</p></blockquote><ol><li>实例分割<br>我们的深度实例分割网络既要准确高效又要允许使用TenseorRT等深度学习推理引擎进行优化和部署。<br><strong>为了保持整个感知系统的处理时间较低</strong>，又车辆前部的区域包含了最重要的关于安全航行所需的环境信息，所以我们只对前鱼眼图像和窄视场图像进行实例分割<br><strong>我们用于实例分割的最终解决方案采用 RetinaMask</strong></li></ol><blockquote><p>它使用 Mask R‑CNN 类型的实例掩码预测头扩展了最先进的单次目标检测器 RetinaNet 。对于特征提取主干，我们使用带有 5 级特征金字塔网络 (FPN) 的 ResNet‑50 。 FPN 通过编码从 1/4 到 1/64 的多分辨率表示来实现多尺度对象检测。 FPN 遵循原始实现 ，具有 256 个特征图和 5 个锚定尺度。具有四个卷积层的边界框回归和分类头附加到金字塔的每个级别。边界框预测被聚合、过滤并分发到 FPN 中的层。接下来，ROIAlign 操作从每个预测的边界框中采样相同数量的特征（14 × 14），最终由具有四个卷积层和一个转置卷积的掩码预测头处理。最后，[1 × 1] 卷积生成大小为 28 × 28 的最终类别掩码。</p><p>我们在来自 UP‑Drive 数据集的鱼眼和窄视野图像上训练两个实例分割网络。该网络在 Microsoft COCO 数据集和 Cityscapes 数据集上进行了预训练。我们将批量大小设置为 16 个图像，并以 0.01 的基本学习率训练 30k次迭代，在 20k 次迭代时减少 10 。损失函数的优化是使用随机梯度下降 (SGD) 完成的。鱼眼图像被裁剪为 1280 × 640，然后在训练期间使用图像的较短边缘进行缩放</p></blockquote><ol><li>全景分割<br><strong>在全景分割之前，我们发现：</strong></li></ol><blockquote><p>实例分割掩码由于其低分辨率（28*28）而更加原始，并且可以观察到对象边界处的错误，尤其是在对象比较大的情况下，而语义分割提供了事物之间的良好分割和填充像素，但是会混淆同一类别的一些东西。</p><p>因此我们考虑通过融合语义分割和实例分割输出来作为全景分割的方案，这有效解决了语义类之间的实例级重叠和冲突。<br>融合过程如图所示：<br><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/6.png" alt></p></blockquote><ol><li>网络集成和部署<br>最终，我们将分割网络、两个实例分割网络（一个用于鱼眼和一个用于窄 HFV 图像）和全景分割融合算法，如图所示集成到我们在ADTF 中运行的感知软件中<br><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/7.png" alt></li></ol><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>在本论文中，我们提供了 UP‑Drive 数据集上的 2D 语义、实例和全景分割的实验结果。</p><h3 id="实验指标："><a href="#实验指标：" class="headerlink" title="实验指标："></a>实验指标：</h3><pre><code>1. 评估指标：我们使⽤标准mIoU（平均交集⽐联合）指标评估语义分割。2. 执行时间：在批量大小为 1 的 NVIDIA GTX 1080 GPU 上测量。</code></pre><p>评估⻥眼图像的语义分割⽹络，对应于前、左、后、右视图：<br><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/table1.png" alt></p><h3 id="图像分割结果："><a href="#图像分割结果：" class="headerlink" title="图像分割结果："></a>图像分割结果：</h3><p>⻋辆的前部区域被两个摄像头覆盖：</p><pre><code>⼀个窄的 60°⽔平视野摄像头，可在增加深度时提供实例分割；⼀个较宽的 160°⽔平视野摄像头，可提供实例，近程的语义和全景分割。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/2022-05-22-16-00-03.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/2022-05-22-16-05-17.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/2022-05-22-16-09-40.png" alt></p><p>与其他⽅法相⽐，我们的解决⽅案最快，为 68 ms，并且与使⽤更⾼分辨率图像的⽹络实现了可⽐的语义分割 mIoU。然⽽，我们观察到我们的实例分割结果不太准确，因为在下采样图像中检测和分割⼩物体更加困难。从实际的⻆度来看，考虑到施加的约束，我们在速度和准确性之间取得了良好的平衡，以低得多的计算成本获得了具有竞争力的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/2022-05-22-17-14-38.png" alt><br>宽视场和窄视场实例分割的比较。行人在 3D 顶视图图像中标有绿色框，并且宽视场和窄视野图像中的红色边界框。在第一列中，我们提供检测到的3D点云的鸟瞰图对象。最佳彩色和变焦效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从多个角度构建全自动车辆原型十分具有挑战性，其中包括：选择最合适的传感器套件、开发在现实世界场景中提供准确结果的快速且稳健的算法、创建用于训练深 度学习算法的质量和完整数据集，以及算法的集成和车辆上的部署。<br>我们的语义摄像机设置可感知车辆周围的 360°。我们的第一个解决方案仅使用安装在所有四个方向上的鱼眼相机。然而，分割和检测范围仅限于车辆周围的近距离。在行人的情况下，分割在 25 米范围内是稳健的，仅适用于非常低速的驾驶和停车操作。对于左视图、右视图和后视图，即使在高速行驶 的情况下，近距离检测也为机动预测和决策提供了足够的信息。然而，远距离 的检测和分割是必要的，尤其是在前视图上。在我们的最终解决方案中，我们 得出结论，鱼眼摄像头和用于前视的窄视场摄像头对于覆盖近距和远距范围都是必要的。此外，另一个重要方面是可以通过处理更高分辨率的图像来增加检测范围。<br>在 UP‑Drive 项目中，我们成功开发了一种能够在城市区域安全导航的自动驾驶汽车。我们为基于鱼眼和窄视场语义相机的环境感知提供了一个模块 化的基于深度学习的解决方案，具有语义、实例和全景分割功能。在本文中，我 们介绍了我们在开发语义环境感知系统时遇到的挑战，因为对准确性、鲁棒性和实时性能的要求很高。我们研究了多种解决方案，激发了我们最终的设计选择，展示了有关分割模块与软件集成的详细信息，最后我们讨论了项目4年过程中的经验教训。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在自动驾驶城市中用于360度感知环境的语义相机&quot;&gt;&lt;a href=&quot;#在自动驾驶城市中用于360度感知环境的语义相机&quot; class=&quot;headerlink&quot; title=&quot;在自动驾驶城市中用于360度感知环境的语义相机&quot;&gt;&lt;/a&gt;在自动驾驶城市中用于360度感知环</summary>
      
    
    
    
    <category term="Article" scheme="https://xrosemary.github.io/categories/Article/"/>
    
    
    <category term="物联网" scheme="https://xrosemary.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Bilibili用户社交网络分析</title>
    <link href="https://xrosemary.github.io/posts/f52e.html"/>
    <id>https://xrosemary.github.io/posts/f52e.html</id>
    <published>2022-09-04T07:49:18.000Z</published>
    <updated>2022-09-19T13:24:36.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bilibili用户社交网络分析"><a href="#Bilibili用户社交网络分析" class="headerlink" title="Bilibili用户社交网络分析"></a>Bilibili用户社交网络分析</h1><center><div style="height:2mm;"></div><div style="font-family:华文楷体;font-size:14pt;">xRosemary</div></center><center><span style="font-family:华文楷体;font-size:9pt;line-height:9mm">https://github.com/xRosemary</span></center><div><div style="width:52px;float:left; font-family:方正公文黑体;">摘　要：</div> <div style="overflow:hidden; font-family:华文楷体;">在信息化时代背景下，社交网络分析在各大社交平台中得到广泛关注。本文试图通过爬取哔哩哔哩网页端的数据，并对其进行社交网络分析，包括网络可视化，网络度的分析以及用户影响力发掘等，从而得到一些分析结论，使读者能够对哔哩哔哩平台的社交网络有一个较为全面的了解。</div></div><div><div style="width:52px;float:left; font-family:方正公文黑体;">关键词：</div> <div style="overflow:hidden; font-family:华文楷体;">社交网络；爬取；哔哩哔哩；可视化；用户影响力；</div></div><center><div style="height:2mm;"></div><div style="font-size:14pt;">xRosemary</div></center><center><span style="font-size:9pt;line-height:9mm"><i>https://github.com/xRosemary</i></span></center><div><div style="width:82px;float:left;line-height:16pt"><b>Abstract: </b></div> <div style="overflow:hidden;line-height:16pt">In the information age, social network analysis has been widely concerned in various social platforms.  This paper attempts to crawl the data of Bilibili's webpage and analyze its social network, including network visualization, network degree analysis and user influence excavation, so as to get some analysis conclusions, so that readers can have a more comprehensive understanding of the social network of Bilibili platform.</div></div><div><div style="width:82px;float:left;line-height:16pt"><b>Key Words: </b></div> <div style="overflow:hidden;line-height:16pt">Social network; Crawl; BiliBili; Visualization; User influence;</div></div><center><strong></strong></center><h2 id="数据集的获取"><a href="#数据集的获取" class="headerlink" title="数据集的获取"></a>数据集的获取</h2><p>　　本次实践的数据集是通过爬取bilibili网页端的数据获得，其数据在网页端的存储格式如图 1 所示。本节下面会详细介绍如何实现数据的爬取。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220518153117813.png" alt="image-20220518153117813"></p><center><strong>图 1  网页数据的格式</strong></center><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>​    在了解数据的具体结构后，本人据此设计了数据库的存储格式。该数据库的ER图如图 2 所示。User_fans表中主要包括三个字段，主键ID，和两个外键mid，fanID。其中mid代表当前用户的ID，fanID代表该用户粉丝的ID。UserData表主要用来存储用户的详情信息，包括姓名、性别、等级、关注者数量以及粉丝数量。User_fans与UserData之间存在着关联关系，也就是说每一个用户都有他的详情信息。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220524222713471.png" alt="image-20220524222713471"></p><center><strong>图 2  数据库ER图</strong></center><h3 id="爬虫的编写"><a href="#爬虫的编写" class="headerlink" title="爬虫的编写"></a>爬虫的编写</h3><p>​    本文的爬虫功能是基于 python 3.9 实现的，调用了外部库 requests 来获取网络请求，以及 json 库来解析 json 数据。爬取数据的逻辑是一个双向层次遍历，其结构如图 3 所示。由于事先我们无法获得所有用户的ID，所以只能以一个用户作为切入点，遍历其粉丝列表和关注列表，并以此为基础，获取更多用户的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220524224158695.png" alt="image-20220524224158695"></p><center><strong>图 3  遍历的结构</strong></center><h2 id="获取数据后的初步分析"><a href="#获取数据后的初步分析" class="headerlink" title="获取数据后的初步分析"></a>获取数据后的初步分析</h2><p>​    本次实验中共爬取了 8801 条数据，在做网络分析前作者对其进行了初步的分析，包括性别分布、粉丝数量统计、关注者数量统计以及用户等级统计等。分析可得，性别保密的用户占大多数，其次是男性、女性；用户等级都是最高等级6级；从整体上来看每个用户关注者数量和粉丝数量都较高，但标准差较大。详细结果如图 4-7 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/%E6%80%A7%E5%88%AB%E6%AF%94%E7%8E%87.png" alt="性别比率" style="zoom:80%;"></p><center><strong>图 4  性别比率</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/follower.png" alt="follower" style="zoom:80%;"></p><center><strong>图 5  粉丝数散点图</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/following.png" alt="following" style="zoom:80%;"></p><center><strong>图 6  关注者数散点图</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/level.png" alt="level" style="zoom:80%;"></p><center><strong>图 7  用户等级分布</strong></center><h2 id="网络结构分析"><a href="#网络结构分析" class="headerlink" title="网络结构分析"></a>网络结构分析</h2><h3 id="网络可视化"><a href="#网络可视化" class="headerlink" title="网络可视化"></a>网络可视化</h3><p>​    网络可视化主要基于包 networkx [1] 和 matplotlib 实现。这里使用了有向图来表达关注与被关注关系，每个节点的出度代表被关注关系，入度代表关注关系。为了方便观看，作者将粉丝数量大于150万的核心用户提取出来进行分析，并将用户的ID转化为用户名，最后根据每个节点的度数对节点的大小进行了缩放处理。最终结果如图 8-9 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/%E5%8F%AF%E8%A7%86%E5%8C%96.png" alt="可视化"></p><center><strong>图 8  网络可视化</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/%E5%B1%80%E9%83%A8%E5%9B%BE.png" alt="局部图" style="zoom:80%;"></p><center><strong>图 9  网络局部放大图</strong></center><h3 id="网络度分布与聚类系数"><a href="#网络度分布与聚类系数" class="headerlink" title="网络度分布与聚类系数"></a>网络度分布与聚类系数</h3><p>​    度分布是指网络中度为k的节点的出现概率，而聚类系数表示一个图中节点聚集程度的系数。本文通过 networkx 包中自带的 degree_histogram 方法和 degree_centrality 方法对这两个指标进行统计。其代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络度分布</span></span><br><span class="line">degree=nx.degree_histogram(G)</span><br><span class="line">x=<span class="built_in">range</span>(<span class="built_in">len</span>(degree))</span><br><span class="line">y=[z/<span class="built_in">float</span>(<span class="built_in">sum</span>(degree))<span class="keyword">for</span> z <span class="keyword">in</span> degree]  <span class="comment"># 将频次转化为频率</span></span><br><span class="line">plt.title(<span class="string">&#x27;网络度分布&#x27;</span>)</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 聚类系数</span></span><br><span class="line">centrality = nx.degree_centrality(G)</span><br><span class="line">x=<span class="built_in">range</span>(<span class="built_in">len</span>(centrality))</span><br><span class="line">y = centrality.values()</span><br><span class="line">plt.title(<span class="string">&#x27;聚类系数&#x27;</span>)</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​    代码运行的结果如图 10-11 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/%E5%BA%A6%E5%88%86%E5%B8%83.png" alt="度分布"></p><center><strong>图 10  网络度分布</strong></center><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/%E8%81%9A%E7%B1%BB%E7%B3%BB%E6%95%B0.png" alt="聚类系数"></p><center><strong>图 11  网络聚类系数</strong></center><pre><code> 从统计结果中可以看出网络的度主要分布在 1-6 附近，但其中的一个节点的度数达到了70以上。从整体上来看满足星型网络的分布情况，即网络通过中心节点将许多点连接而组成。从聚类系数上来看也是，一个节点的聚类系数远远高于其他所有节点，这也验证了前面所述的观点。</code></pre><h3 id="网络其他指标"><a href="#网络其他指标" class="headerlink" title="网络其他指标"></a>网络其他指标</h3><h4 id="网络的密度"><a href="#网络的密度" class="headerlink" title="网络的密度"></a>网络的密度</h4><p>​    网络密度是网络中实际存在的边数与可容纳的边数上限的比值。本文通过 networkx 中的 density 方法实现。其代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络的密度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;图的密度:&#x27;</span>, nx.density(G))</span><br></pre></td></tr></table></figure><h4 id="网络直径"><a href="#网络直径" class="headerlink" title="网络直径"></a>网络直径</h4><p>​    网络直径是指网络中任意两节点间距离的最大值。由于本实验中生成的是有向图，可能存在非连通网络，因此作者现将网络分割成数个连通子网络，然后再进行统计。其代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络直径</span></span><br><span class="line">G_child=<span class="built_in">list</span>(G.subgraph(c) <span class="keyword">for</span> c <span class="keyword">in</span> nx.connected_components(G))</span><br><span class="line">cnt = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> G_child:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连通子网络%d的直径:&#x27;</span> % cnt, nx.diameter(g))</span><br><span class="line">    cnt = cnt+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>​    上述代码的运行结果如图 12 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/image-20220524235109574.png" alt="image-20220524235109574"></p><center><strong>图 12  网络其他指标</strong></center><h2 id="用户影响力发掘"><a href="#用户影响力发掘" class="headerlink" title="用户影响力发掘"></a>用户影响力发掘</h2><p>​    在对本实验中的实证网络进行一系列分析后，作者还对本次爬取到的用户的影响力进行了分析，分别计算出了用户权威性最高的前十位用户，以及用户枢纽性最高的前十位用户。这里作者采用了两种方法进行计算，分别是 PageRank 和 HITS 方法 [2]。其主要代码如下所示，运行结果如图 13 所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PageRank</span></span><br><span class="line">pr = nx.pagerank(G)</span><br><span class="line">prsorted = <span class="built_in">sorted</span>(pr.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;基于pagerank算法的用户影响力前10名\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> prsorted[:<span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">print</span>(p[<span class="number">0</span>], p[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># HITS</span></span><br><span class="line">hub, auth = nx.hits(G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;基于HITS(hub)算法的用户影响力前10名\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">sorted</span>(hub.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[:<span class="number">10</span>]:</span><br><span class="line"><span class="built_in">print</span>(h[<span class="number">0</span>], h[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------------------\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;基于HITS(auth)算法的用户影响力前10名\n&#x27;</span>)    </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">sorted</span>(auth.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[:<span class="number">10</span>]:     </span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], a[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xRosemary/test/img/%E7%94%A8%E6%88%B7%E5%BD%B1%E5%93%8D%E5%8A%9B.png" alt="用户影响力" style="zoom:80%;"></p><center><strong>图 13  用户影响力榜单</strong></center><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​    本文爬取了Bilibili网页端的用户信息，并对该实证网络进行了一系列分析，主要讨论了用户信息分布、网络的结构以及用户的影响力信息。从分析结果可看出该网站用户群体中有一位处于主导地位。由于设备受限，本文只爬取了接近9000条数据，并只筛选出粉丝数大于150万的核心用户进行分析，结果可能与真实分布情况存在一些偏差。不过，该结果也能反映出一些有意义的信息。希望读者通过观看本文，能对Bilibili的用户分布情况有进一步的了解。</p><p><strong>参考文献:</strong> </p><p>［1］  司六米希.【复杂网络】实证网络可视化及其分析 - 含度分布，聚类系数，网络直径，度关联性，权重分析 (性质解析及代码)【python+networkx】[CP].CSDN, [2022-05-20]. <a href="https://blog.csdn.net/weixin_50927106/article/details/123921734">https://blog.csdn.net/weixin_50927106/article/details/123921734</a></p><p>［2］  nana-li.PageRank算法和HITS算法 [CP].CSDN, [2018-07-27]. <a href="https://blog.csdn.net/quiet_girl/article/details/81227904">https://blog.csdn.net/quiet_girl/article/details/81227904</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bilibili用户社交网络分析&quot;&gt;&lt;a href=&quot;#Bilibili用户社交网络分析&quot; class=&quot;headerlink&quot; title=&quot;Bilibili用户社交网络分析&quot;&gt;&lt;/a&gt;Bilibili用户社交网络分析&lt;/h1&gt;&lt;center&gt;&lt;div styl</summary>
      
    
    
    
    <category term="Python" scheme="https://xrosemary.github.io/categories/Python/"/>
    
    
    <category term="复杂网络分析" scheme="https://xrosemary.github.io/tags/%E5%A4%8D%E6%9D%82%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xrosemary.github.io/posts/3eeb.html"/>
    <id>https://xrosemary.github.io/posts/3eeb.html</id>
    <published>2022-09-04T01:55:29.266Z</published>
    <updated>2022-09-04T06:30:24.257Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
